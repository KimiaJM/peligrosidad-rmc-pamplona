import DragAndDrop,{DragAndDropEvent}from"ol/interaction/DragAndDrop";import EventType from"ol/events/EventType";import{getUserProjection}from"ol/proj";const currentFiles=new Set;var DragAndDropEventType={ADD_FEATURES:"addfeatures"};const getFileNameWithoutExtension=function(e){const t=e.lastIndexOf(".");return t>=0?e.substr(0,t):e},getFeatureGroupName=function(e,t){if(Object.prototype.hasOwnProperty.call(e.getProperties(),"h4_Capa"))return e.getProperties().h4_Capa;const r=/(?<layer>[-_\p{Letter}.]+[\p{Letter}])?\.*(?<id>[\d]*)?/iu.exec(e.getId()||e.ol_uid).groups;return r.layer?r.layer:getFileNameWithoutExtension(t.name)};DragAndDrop.prototype.handleResult_=async function(e,t){const r=t.target.result,n=this.getMap();let a=this.projection_;a||(a=getUserProjection(),a)||(a=n.getView().getProjection());let o={},i=[];const s=e.name;let l,c;const p=this.formats_;for(let t=0,o=p.length;t<o;++t){l=p[t];let o=r;if(this.readAsBuffer_&&"arraybuffer"!==l.getType()&&(void 0===c&&(c=(new TextDecoder).decode(r)),o=c),i=await this.tryReadFeatures_(l,o,{featureProjection:a,fileName:e.name,fileNames:[...currentFiles.values()]}),!0===i)return void(n?._wrap.parent||window).dropFilesCounter--;if(i?.length>0)break}i&&i.length>0?o=i.every((e=>Array.isArray(e)))?i.reduce((function(t,r){if(0===r.length)return t;const n=getFeatureGroupName(r[0],e);return t[n]??=[],t[n]=t[n].concat(r),t}),{}):l.groupFeatures?l.groupFeatures(i,(function(t){return getFeatureGroupName(t,e)})):i.reduce((function(t,r){var n=r._folders?.length?r._folders[r._folders.length-1]:null;return n||(n=getFeatureGroupName(r,e)),t[n]??=[],t[n].push(r),t}),{}):o[getFileNameWithoutExtension(e.name)]=i;const d=Date.now(),u=Object.keys(o);if(u.length>1){const e=this.getMap()?._wrap.parent||window;e.dropFilesCounter=e.dropFilesCounter+u.length-1}for(var f=0;f<u.length;f++){const t=u[f],r=o[t];"undefined"!==t&&r&&r.forEach((e=>{u.length>1&&(e._group=t)})),this.source_&&(this.source_.clear(),this.source_.addFeatures(r));const n=r&&r.length&&r[0]._document,i=new File([e],n?n+" ("+s+")":s,{lastModified:d});e._fileSystemFile&&(i._fileSystemFile=e._fileSystemFile);const c=e._fileHandle;c&&(i._fileHandle=c);const p=new DragAndDropEvent(DragAndDropEventType.ADD_FEATURES,i,r,a);p._groupIndex=f,p._groupCount=u.length,p._groupName=t;const g=(e,t)=>l.getFeatureTypeMetadata?l.getFeatureTypeMetadata(e,t):e;if(r){const e=r.map((e=>l.featureMetadata.get(e))).filter((e=>!!e));if(e.length){const t=e[0];e.every((e=>e==t))&&(p._metadata=g(t,r))}}this.dispatchEvent(p)}},DragAndDrop.prototype.handleDrop=async function(e){const t=e.dataTransfer.items;if(DataTransferItem.prototype.getAsFileSystemHandle){const e=[],r=async function(t){if(t instanceof window.FileSystemDirectoryHandle)for await(const e of t.values())await r(e);else t&&e.push(t)};for await(const e of[...t].map((e=>e.getAsFileSystemHandle())))await r(e);e.forEach(((e,t,r)=>{const n=r.slice();n.splice(t,1),e._siblings=n})),e.forEach((e=>this.processFile(e)))}else{const e=t=>{t.isDirectory?t.createReader().readEntries((function(t){t.forEach((function(t){e(t)}))})):this.processFile(t)};for(var r=0,n=t.length;r<n;++r){const n=t[r];"file"===n.kind&&e(n.getAsFile())}}currentFiles.clear()},DragAndDrop.prototype.processFile=async function(e){let t;if(currentFiles.add(e.name),globalThis.FileSystemFileHandle&&e instanceof globalThis.FileSystemFileHandle){t=e;try{e=await t.getFile()}catch(e){return console.warn(e),void this.dispatchEvent(new DragAndDropEvent("error",t))}e._fileHandle=t}const r=this.getMap()?._wrap.parent||globalThis;if(r.dropFilesCounter??=0,r.dropFilesCounter++,"application/zip"===e.type||"application/x-zip-compressed"===e.type||"application/vnd.google-earth.kmz"===e.type||(!e.type||"application/octet-stream"===e.type)&&e.name.match(/\.kmz|\.zip$/gi)){currentFiles.delete(e.name);const{default:a}=await import("jszip");var n=new a;const o=await n.loadAsync(e);r.dropFilesCounter--;const i="application/vnd.google-earth.kmz"===e.type||(!e.type||"application/octet-stream"===e.type)&&e.name.match(/\.kmz$/gi),s=[];o.forEach((function(e,t){t.dir||(r.dropFilesCounter++,s.push({name:e,file:t}))})),(await Promise.all(s.map((async n=>{const a=await n.file.async("blob");r.dropFilesCounter--;const o={};i&&(o.type="application/vnd.google-earth.kml+xml");const s=new File([a],n.name,o);if(s._fileSystemFile=e._fileSystemFile||e,t)s._fileHandle=t;else{const t=e._fileHandle;t&&(s._fileHandle=t)}return s})))).forEach((e=>this.processFile(e)))}else{var a=new FileReader;a.addEventListener(EventType.LOAD,this.handleResult_.bind(this,e)),this.readAsBuffer_?a.readAsArrayBuffer(e):a.readAsText(e)}},DragAndDrop.prototype.tryReadFeatures_=async function(e,t,r){let n;try{n=await e.readFeatures(t,r)}catch(e){return null}return!0===n||n?.length&&n.some((e=>Array.isArray(e)?e.some((e=>!!e.getGeometry())):!!e.getGeometry()))?n:null};export default DragAndDrop;