import Feature from"ol/Feature.js";import LineString from"ol/geom/LineString.js";import MultiLineString from"ol/geom/MultiLineString.js";import Point from"ol/geom/Point.js";import XMLFeature from"ol/format/XMLFeature.js";import{OBJECT_PROPERTY_NODE_FACTORY,XML_SCHEMA_INSTANCE_URI,createElementNS,makeArrayPusher,makeArraySerializer,makeChildAppender,makeObjectPropertySetter,makeSequence,makeSimpleNodeFactory,makeStructureNS,parseNode,pushParseAndPop,pushSerializeAndPop,parse,isDocument}from"ol/xml.js";import{get as getProjection}from"ol/proj.js";import{readDateTime,readDecimal,readPositiveInteger,readString,writeDateTimeTextNode,writeDecimalTextNode,writeNonNegativeIntegerTextNode,writeStringTextNode}from"ol/format/xsd.js";import{transformGeometryWithOptions}from"ol/format/Feature.js";import Consts from"../../../TC/Consts.js";import FeatureTypeParser from"../../../TC/tool/FeatureTypeParser.js";import SitnaPoint from"../../../SITNA/feature/Point.js";import Polyline from"../../../SITNA/feature/Polyline.js";import MultiPolyline from"../../../SITNA/feature/MultiPolyline.js";let NAMESPACE_URIS=[null,"http://www.topografix.com/GPX/1/0","http://www.topografix.com/GPX/1/1"];const getAllCombinations=function(e){for(var t=[],r=[],a=Math.pow(2,e.length),n=0;n<a;n++){r=[];for(var i=0;i<e.length;i++)n&Math.pow(2,i)&&-1==r.indexOf(e[i])&&r.push(e[i]);r.length>0&&-1==t.indexOf(r.join(" "))&&t.push(r.join(" "))}return t},cleanCombinationsByFormat=function(e,t){if(e&&e.length>0)for(var r=0;r<t.length;r++){var a=e.indexOf(t[r]);a>-1&&e.splice(a,1)}},CUSTOM_NAMESPACE_URIS=getAllCombinations(NAMESPACE_URIS.slice().slice(1));cleanCombinationsByFormat(CUSTOM_NAMESPACE_URIS,NAMESPACE_URIS),NAMESPACE_URIS=NAMESPACE_URIS.concat(CUSTOM_NAMESPACE_URIS);const readDateTime1000=function(e){return 1e3*readDateTime(e)},SCHEMA_LOCATION="http://www.topografix.com/GPX/1/1 http://www.topografix.com/GPX/1/1/gpx.xsd",FEATURE_READER={rte:readRte,trk:readTrk,wpt:readWpt},GPX_PARSERS=makeStructureNS(NAMESPACE_URIS,{rte:makeArrayPusher(readRte),trk:makeArrayPusher(readTrk),wpt:makeArrayPusher(readWpt)}),LINK_PARSERS=makeStructureNS(NAMESPACE_URIS,{text:makeObjectPropertySetter(readString,"linkText"),type:makeObjectPropertySetter(readString,"linkType")}),GPX_SERIALIZERS=makeStructureNS(NAMESPACE_URIS,{rte:makeChildAppender(writeRte),trk:makeChildAppender(writeTrk),wpt:makeChildAppender(writeWpt)});class GPX extends XMLFeature{constructor(e){super(),e=e||{},this.dataProjection=getProjection("EPSG:4326"),this.readExtensions_=e.readExtensions}handleReadExtensions_(e){e||(e=[]);for(let t=0,r=e.length;t<r;++t){const r=e[t];if(this.readExtensions_){const e=r.get("extensionsNode_")||null;this.readExtensions_(r,e)}r.set("extensionsNode_",void 0)}}readFeatureFromNode(e,t){if(!NAMESPACE_URIS.includes(e.namespaceURI))return null;const r=FEATURE_READER[e.localName];if(!r)return null;const a=r(e,[this.getReadOptions(e,t)]);return a?(this.handleReadExtensions_([a]),a):null}readFeaturesFromNode(e,t){if(!NAMESPACE_URIS.includes(e.namespaceURI))return[];if([...e.attributes].forEach((e=>{e.name.startsWith("xmlns:")&&(this.featureTypeMetadata??={origin:Consts.format.GPX,originalMetadata:{namespaces:[],featureTypes:{gpx:{}}}},this.featureTypeMetadata.originalMetadata.namespaces.push({prefix:e.name.substring(e.name.indexOf(":")+1),value:e.value}))})),"gpx"==e.localName){const r=pushParseAndPop([],GPX_PARSERS,e,[this.getReadOptions(e,t)]);return r?(this.featureTypeMetadata&&r.forEach((e=>this.featureMetadata.set(e,this.featureTypeMetadata))),this.handleReadExtensions_(r),r):[]}return[]}async readFeatures(e,t){let r,a=e;if(!e)return[];if("string"==typeof e){const n=parse(e);r=this.readFeaturesFromDocument(n,t),a=n}else r=isDocument(e)?this.readFeaturesFromDocument(e,t):this.readFeaturesFromNode(e,t);if(this.featureTypeMetadata){const e=this.featureTypeMetadata.originalMetadata,t=new FeatureTypeParser,r=e.featureTypes.gpx,n=await t.parseSchemas(a,"gpx");Object.assign(r,Object.values(n)[0])}return r}writeFeaturesNode(e,t){t=this.adaptOptions(t);const r=createElementNS("http://www.topografix.com/GPX/1/1","gpx");return r.setAttributeNS("http://www.w3.org/2000/xmlns/","xmlns:xsi",XML_SCHEMA_INSTANCE_URI),r.setAttributeNS(XML_SCHEMA_INSTANCE_URI,"xsi:schemaLocation",SCHEMA_LOCATION),r.setAttribute("version","1.1"),r.setAttribute("creator","OpenLayers"),pushSerializeAndPop({node:r},GPX_SERIALIZERS,GPX_NODE_FACTORY,e,[t]),r}writeFeatures(e,t){const r=e.map((e=>{const t=e.getGeometry();if(t instanceof LineString)(e=e.clone()).setGeometry(new MultiLineString([t.getCoordinates()]));else if(t instanceof Point&&!e.getKeys().includes("name")){let t=e.getStyle();"function"==typeof t&&(t=t(e)),Array.isArray(t)&&(t=t.find((e=>e.getText())));const r=t?.getText();r&&(e=e.clone()).set("name",r.getText())}return e})),a=this.writeFeaturesNode(r,t);return this.xmlSerializer_.serializeToString(a).replaceAll("<ele>NaN</ele>","")}getFeatureTypeMetadata(e,t){const r=super.getFeatureTypeMetadata(e,t),a=e=>t=>t.name===e;return function(e){let t;switch(!0){case e instanceof SitnaPoint:t=r.attributes.find(a("wpt"));break;case e instanceof Polyline:t=r.attributes.find(a("rte"));break;case e instanceof MultiPolyline:t=r.attributes.find(a("trk"))}return{origin:Consts.format.GPX,sealed:!0,attributes:t?.value??[],originalMetadata:r.originalMetadata}}}}const RTE_PARSERS=makeStructureNS(NAMESPACE_URIS,{name:makeObjectPropertySetter(readString),cmt:makeObjectPropertySetter(readString),desc:makeObjectPropertySetter(readString),src:makeObjectPropertySetter(readString),link:parseLink,number:makeObjectPropertySetter(readPositiveInteger),extensions:parseExtensions,type:makeObjectPropertySetter(readString),rtept:parseRtePt}),RTEPT_PARSERS=makeStructureNS(NAMESPACE_URIS,{ele:makeObjectPropertySetter(readDecimal),time:makeObjectPropertySetter(readDateTime1000)}),TRK_PARSERS=makeStructureNS(NAMESPACE_URIS,{name:makeObjectPropertySetter(readString),cmt:makeObjectPropertySetter(readString),desc:makeObjectPropertySetter(readString),src:makeObjectPropertySetter(readString),link:parseLink,number:makeObjectPropertySetter(readPositiveInteger),type:makeObjectPropertySetter(readString),extensions:parseExtensions,trkseg:parseTrkSeg}),TRKSEG_PARSERS=makeStructureNS(NAMESPACE_URIS,{trkpt:parseTrkPt}),TRKPT_PARSERS=makeStructureNS(NAMESPACE_URIS,{ele:makeObjectPropertySetter(readDecimal),time:makeObjectPropertySetter(readDateTime1000)}),WPT_PARSERS=makeStructureNS(NAMESPACE_URIS,{ele:makeObjectPropertySetter(readDecimal),time:makeObjectPropertySetter(readDateTime1000),magvar:makeObjectPropertySetter(readDecimal),geoidheight:makeObjectPropertySetter(readDecimal),name:makeObjectPropertySetter(readString),cmt:makeObjectPropertySetter(readString),desc:makeObjectPropertySetter(readString),src:makeObjectPropertySetter(readString),link:parseLink,sym:makeObjectPropertySetter(readString),type:makeObjectPropertySetter(readString),fix:makeObjectPropertySetter(readString),sat:makeObjectPropertySetter(readPositiveInteger),hdop:makeObjectPropertySetter(readDecimal),vdop:makeObjectPropertySetter(readDecimal),pdop:makeObjectPropertySetter(readDecimal),ageofdgpsdata:makeObjectPropertySetter(readDecimal),dgpsid:makeObjectPropertySetter(readPositiveInteger),extensions:parseExtensions}),LINK_SEQUENCE=["text","type"],LINK_SERIALIZERS=makeStructureNS(NAMESPACE_URIS,{text:makeChildAppender(writeStringTextNode),type:makeChildAppender(writeStringTextNode)}),RTE_SEQUENCE=makeStructureNS(NAMESPACE_URIS,["name","cmt","desc","src","link","number","type","rtept"]),RTE_SERIALIZERS=makeStructureNS(NAMESPACE_URIS,{name:makeChildAppender(writeStringTextNode),cmt:makeChildAppender(writeStringTextNode),desc:makeChildAppender(writeStringTextNode),src:makeChildAppender(writeStringTextNode),link:makeChildAppender(writeLink),number:makeChildAppender(writeNonNegativeIntegerTextNode),type:makeChildAppender(writeStringTextNode),rtept:makeArraySerializer(makeChildAppender(writeWptType))}),RTEPT_TYPE_SEQUENCE=makeStructureNS(NAMESPACE_URIS,["ele","time"]),TRK_SEQUENCE=makeStructureNS(NAMESPACE_URIS,["name","cmt","desc","src","link","number","type","trkseg"]),TRK_SERIALIZERS=makeStructureNS(NAMESPACE_URIS,{name:makeChildAppender(writeStringTextNode),cmt:makeChildAppender(writeStringTextNode),desc:makeChildAppender(writeStringTextNode),src:makeChildAppender(writeStringTextNode),link:makeChildAppender(writeLink),number:makeChildAppender(writeNonNegativeIntegerTextNode),type:makeChildAppender(writeStringTextNode),trkseg:makeArraySerializer(makeChildAppender(writeTrkSeg))}),TRKSEG_NODE_FACTORY=makeSimpleNodeFactory("trkpt"),TRKSEG_SERIALIZERS=makeStructureNS(NAMESPACE_URIS,{trkpt:makeChildAppender(writeWptType)}),WPT_TYPE_SEQUENCE=makeStructureNS(NAMESPACE_URIS,["ele","time","magvar","geoidheight","name","cmt","desc","src","link","sym","type","fix","sat","hdop","vdop","pdop","ageofdgpsdata","dgpsid"]),WPT_TYPE_SERIALIZERS=makeStructureNS(NAMESPACE_URIS,{ele:makeChildAppender(writeDecimalTextNode),time:makeChildAppender(writeDateTimeTextNode),magvar:makeChildAppender(writeDecimalTextNode),geoidheight:makeChildAppender(writeDecimalTextNode),name:makeChildAppender(writeStringTextNode),cmt:makeChildAppender(writeStringTextNode),desc:makeChildAppender(writeStringTextNode),src:makeChildAppender(writeStringTextNode),link:makeChildAppender(writeLink),sym:makeChildAppender(writeStringTextNode),type:makeChildAppender(writeStringTextNode),fix:makeChildAppender(writeStringTextNode),sat:makeChildAppender(writeNonNegativeIntegerTextNode),hdop:makeChildAppender(writeDecimalTextNode),vdop:makeChildAppender(writeDecimalTextNode),pdop:makeChildAppender(writeDecimalTextNode),ageofdgpsdata:makeChildAppender(writeDecimalTextNode),dgpsid:makeChildAppender(writeNonNegativeIntegerTextNode)}),GEOMETRY_TYPE_TO_NODENAME={Point:"wpt",LineString:"rte",MultiLineString:"trk"};function GPX_NODE_FACTORY(e,t,r){const a=e.getGeometry();if(a){const e=GEOMETRY_TYPE_TO_NODENAME[a.getType()];if(e){const r=t[t.length-1].node;return createElementNS(r.namespaceURI,e)}}}function appendCoordinate(e,t,r,a){return e.push(parseFloat(r.getAttribute("lon")),parseFloat(r.getAttribute("lat"))),"ele"in a?(e.push(a.ele),delete a.ele,t.hasZ=!0):e.push(0),"time"in a?(e.push(a.time),delete a.time,t.hasM=!0):e.push(0),e}function applyLayoutOptions(e,t,r){let a="XY",n=2;if(e.hasZ&&e.hasM?(a="XYZM",n=4):e.hasZ?(a="XYZ",n=3):e.hasM&&(a="XYM",n=3),4!==n){for(let r=0,a=t.length/4;r<a;r++)t[r*n]=t[4*r],t[r*n+1]=t[4*r+1],e.hasZ&&(t[r*n+2]=t[4*r+2]),e.hasM&&(t[r*n+2]=t[4*r+3]);if(t.length=t.length/4*n,r)for(let e=0,t=r.length;e<t;e++)r[e]=r[e]/4*n}return a}function parseLink(e,t){const r=t[t.length-1],a=e.getAttribute("href");null!==a&&(r.link=a),parseNode(LINK_PARSERS,e,t)}function parseExtensions(e,t){t[t.length-1].extensionsNode_=e}function parseRtePt(e,t){const r=pushParseAndPop({},RTEPT_PARSERS,e,t);if(r){const a=t[t.length-1];appendCoordinate(a.flatCoordinates,a.layoutOptions,e,r)}}function parseTrkPt(e,t){const r=pushParseAndPop({},TRKPT_PARSERS,e,t);if(r){const a=t[t.length-1];appendCoordinate(a.flatCoordinates,a.layoutOptions,e,r)}}function parseTrkSeg(e,t){const r=t[t.length-1];parseNode(TRKSEG_PARSERS,e,t);const a=r.flatCoordinates;r.ends.push(a.length)}function readRte(e,t){const r=t[0],a=pushParseAndPop({flatCoordinates:[],layoutOptions:{}},RTE_PARSERS,e,t);if(!a)return;const n=a.flatCoordinates;delete a.flatCoordinates;const i=a.layoutOptions;delete a.layoutOptions;const o=applyLayoutOptions(i,n),s=new LineString(n,o);transformGeometryWithOptions(s,!1,r);const p=new Feature(s);return p.setProperties(a,!0),p}function readTrk(e,t){const r=t[0],a=pushParseAndPop({flatCoordinates:[],ends:[],layoutOptions:{}},TRK_PARSERS,e,t);if(!a)return;const n=a.flatCoordinates;delete a.flatCoordinates;const i=a.ends;delete a.ends;const o=a.layoutOptions;delete a.layoutOptions;const s=applyLayoutOptions(o,n,i),p=new MultiLineString(n,s,i);transformGeometryWithOptions(p,!1,r);const d=new Feature(p);return d.setProperties(a,!0),d}function readWpt(e,t){const r=t[0],a=pushParseAndPop({},WPT_PARSERS,e,t);if(!a)return;const n={},i=appendCoordinate([],n,e,a),o=applyLayoutOptions(n,i),s=new Point(i,o);transformGeometryWithOptions(s,!1,r);const p=new Feature(s);return p.setProperties(a,!0),p}function writeLink(e,t,r){e.setAttribute("href",t);const a=r[r.length-1].properties,n=[a.linkText,a.linkType];pushSerializeAndPop({node:e},LINK_SERIALIZERS,OBJECT_PROPERTY_NODE_FACTORY,n,r,LINK_SEQUENCE)}function writeWptType(e,t,r){const a=r[r.length-1],n=a.node.namespaceURI,i=a.properties;switch(e.setAttributeNS(null,"lat",String(t[1])),e.setAttributeNS(null,"lon",String(t[0])),a.geometryLayout){case"XYZM":0!==t[3]&&(i.time=t[3]);case"XYZ":0!==t[2]&&null!==t[2]&&(i.ele=t[2]);break;case"XYM":0!==t[2]&&(i.time=t[2])}const o="rtept"==e.nodeName?RTEPT_TYPE_SEQUENCE[n]:WPT_TYPE_SEQUENCE[n],s=makeSequence(i,o);pushSerializeAndPop({node:e,properties:i},WPT_TYPE_SERIALIZERS,OBJECT_PROPERTY_NODE_FACTORY,s,r,o)}function writeRte(e,t,r){const a=r[0],n=t.getProperties(),i={node:e};i.properties=n;const o=t.getGeometry();if("LineString"==o.getType()){const e=transformGeometryWithOptions(o,!0,a);i.geometryLayout=e.getLayout(),n.rtept=e.getCoordinates()}const s=r[r.length-1].node,p=RTE_SEQUENCE[s.namespaceURI],d=makeSequence(n,p);pushSerializeAndPop(i,RTE_SERIALIZERS,OBJECT_PROPERTY_NODE_FACTORY,d,r,p)}function writeTrk(e,t,r){const a=r[0],n=t.getProperties(),i={node:e};i.properties=n;const o=t.getGeometry();if("MultiLineString"==o.getType()){const e=transformGeometryWithOptions(o,!0,a);n.trkseg=e.getLineStrings()}const s=r[r.length-1].node,p=TRK_SEQUENCE[s.namespaceURI],d=makeSequence(n,p);pushSerializeAndPop(i,TRK_SERIALIZERS,OBJECT_PROPERTY_NODE_FACTORY,d,r,p)}function writeTrkSeg(e,t,r){const a={node:e};a.geometryLayout=t.getLayout(),a.properties={},pushSerializeAndPop(a,TRKSEG_SERIALIZERS,TRKSEG_NODE_FACTORY,t.getCoordinates(),r)}function writeWpt(e,t,r){const a=r[0],n=r[r.length-1];n.properties=t.getProperties();const i=t.getGeometry();if("Point"==i.getType()){const t=transformGeometryWithOptions(i,!0,a);n.geometryLayout=t.getLayout(),writeWptType(e,t.getCoordinates(),r)}}export default GPX;