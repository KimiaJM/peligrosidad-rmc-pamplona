/*! For license information please see GMLBase.js.LICENSE.txt */
import GMLBase from"ol/format/GMLBase";import{Geometry}from"ol/geom";import{transformExtentWithOptions,transformGeometryWithOptions}from"ol/format/Feature.js";import{pushParseAndPop,parse,isDocument}from"ol/xml.js";import Consts from"../../../TC/Consts";import FeatureTypeParser from"../../../TC/tool/FeatureTypeParser";const ATTRIBUTE_NAME_MARK="@",TEXT_NODE_NAME="#text",getNameComponents=function(e){let[t,r]=e.split(":");return r||([t,r]=[r,t]),[t,r]},getPropertyComponents=function(e){let[t,r]=e.split("@");const[o,s]=getNameComponents(t);if(!r)return[o,s];const[a,n]=getNameComponents(r);return 0===t.length?[a,"@"+n]:o!==a&&a?[o,s+"@"+a+":"+n]:[o,s+"@"+n]},gmlNamespace="http://www.opengis.net/gml",gml32Namespace="http://www.opengis.net/gml/3.2";GMLBase.prototype.MULTIPOINT_PARSERS[gml32Namespace]=GMLBase.prototype.MULTIPOINT_PARSERS[gmlNamespace],GMLBase.prototype.MULTILINESTRING_PARSERS[gml32Namespace]=GMLBase.prototype.MULTILINESTRING_PARSERS[gmlNamespace],GMLBase.prototype.MULTIPOLYGON_PARSERS[gml32Namespace]=GMLBase.prototype.MULTIPOLYGON_PARSERS[gmlNamespace],GMLBase.prototype.POINTMEMBER_PARSERS[gml32Namespace]=GMLBase.prototype.POINTMEMBER_PARSERS[gmlNamespace],GMLBase.prototype.LINESTRINGMEMBER_PARSERS[gml32Namespace]=GMLBase.prototype.LINESTRINGMEMBER_PARSERS[gmlNamespace],GMLBase.prototype.POLYGONMEMBER_PARSERS[gml32Namespace]=GMLBase.prototype.POLYGONMEMBER_PARSERS[gmlNamespace],GMLBase.prototype.RING_PARSERS[gml32Namespace]=GMLBase.prototype.RING_PARSERS[gmlNamespace],GMLBase.prototype.readFeaturesInternal=function(e,t){const r=e.localName;let o=null;if("FeatureCollection"==r){[...e.attributes].forEach((e=>{e.name.startsWith("xmlns:")&&(this.featureTypeMetadata??={origin:Consts.format.GML,originalMetadata:{namespaces:[],featureTypes:{}}},this.featureTypeMetadata.originalMetadata.namespaces.push({prefix:e.name.substring(e.name.indexOf(":")+1),value:e.value}))})),e.getAttribute("xsi:schemaLocation")?.replace(/\s+/g," ").split(" ").forEach(((e,t,r)=>{if(t%2==0){const o=this.featureTypeMetadata?.originalMetadata.namespaces.find((t=>t.value===e));o&&(o.schemaLocation=r[t+1])}}));var s=this.FEATURE_COLLECTION_PARSERS[GMLBase.prototype.namespace]||this.FEATURE_COLLECTION_PARSERS[this.namespace];s.member||(s.member=ol.xml.makeArrayPusher(GMLBase.prototype.readFeaturesInternal));const r=Object.keys(this.FEATURE_COLLECTION_PARSERS)[0];this.FEATURE_COLLECTION_PARSERS[e.namespaceURI]=this.FEATURE_COLLECTION_PARSERS[r],this.FEATURE_COLLECTION_PARSERS["http://www.opengis.net/gml"]=this.FEATURE_COLLECTION_PARSERS[r],o=pushParseAndPop([],this.FEATURE_COLLECTION_PARSERS,e,t,this),this.featureTypeMetadata&&o.forEach((e=>this.featureMetadata.set(e,this.featureTypeMetadata)))}else if("featureMembers"==r||"featureMember"==r||"member"==r){const s=t[0];let a=s.featureType,n=s.featureNS;const i="p",p="p0";if(e.childNodes){a=[],n={};for(let r=0,o=e.childNodes.length;r<o;++r){const o=e.childNodes[r];if(1===o.nodeType){const[e,r]=getNameComponents(o.nodeName);if("FeatureCollection"==r)return pushParseAndPop([],this.FEATURE_COLLECTION_PARSERS,o,t,this);if(-1===a.indexOf(r)){let t="",s=0;const p=o.namespaceURI;for(let e in n){if(n[e]===p){t=e;break}++s}t||(t=e??i+s,n[t]=p),a.push(t+":"+r)}}}"featureMember"!=r&&(s.featureType=a,s.featureNS=n)}if("string"==typeof n){const e=n;n={},n[p]=e}const l={},m=Array.isArray(a)?a:[a];for(let e in n){const t={};for(let o=0,s=m.length;o<s;++o)(-1===m[o].indexOf(":")?p:m[o].split(":")[0])===e&&(t[m[o].split(":").pop()]="featureMembers"==r?ol.xml.makeArrayPusher(this.readFeatureElement,this):ol.xml.makeReplacer(this.readFeatureElement,this));l[n[e]]=t}o=pushParseAndPop("featureMember"==r?void 0:[],l,e,t);const c=this.featureTypeMetadata?.originalMetadata;c&&m.forEach((e=>{Object.prototype.hasOwnProperty.call(c.featureTypes,e)||(c.featureTypes[e]={})}))}return null===o&&(o=[]),o},GMLBase.prototype.readGeometryElement=function(e,t){var r=t[0];if(r.srsName=e.firstElementChild.getAttribute("srsName"),r.srsDimension=e.firstElementChild.getAttribute("srsDimension"),(this instanceof ol.format.GML2CRS84||this instanceof ol.format.GML3CRS84)&&("EPSG:4326"!==r.srsName||!r.srsName))throw new Error("Conflicto de CRS");r.srsName||(r.srsName=this.srsName),r.dataProjection=ol.proj.get(r.srsName);let o=pushParseAndPop(null,this.GEOMETRY_PARSERS,e,t,this);return o?Array.isArray(o)?transformExtentWithOptions(o,r):(o.getStride()>2&&o.getFlatCoordinates().every(((e,t)=>(t+1)%3!=0||0===e))&&(o=new o.constructor(o.getCoordinates(),"XY")),transformGeometryWithOptions(o,!1,r)):void 0};const ONLY_WHITESPACE_RE=/^[\s\xa0]*$/,assignPropertyValue=(e,t,r)=>{if(Object.prototype.hasOwnProperty.call(e,t)){const o=e[t];void 0===o?e[t]=[]:o instanceof Array||(e[t]=[o]),void 0!==r&&e[t].push(r)}else e[t]=r};GMLBase.prototype.readFeatureElementInternal=function(e,t,r){let o,s={};for(let r=e.firstElementChild;r;r=r.nextElementSibling){let e,a=!1;const n=r.localName,i=r.tagName;0===r.childNodes.length||1===r.childNodes.length&&(3===r.firstChild.nodeType||4===r.firstChild.nodeType)?(e=ol.xml.getAllTextContent(r,!1),ONLY_WHITESPACE_RE.test(e)&&(e=void 0)):(e=this.readGeometryElement(r,t),e?"boundedBy"!==n&&"referencePoint"!==n&&(o=i.substring(i.indexOf(":")+1),a=!0):e=this.readFeatureElementInternal(r,t,!1));const p=a?o:i,l="xsi:nil";"true"===r.getAttribute(l)&&(e=null);const m=r.attributes.length;if(m>0&&(1!==m||!r.hasAttribute(l))){e&&"object"==typeof e||(e={[TEXT_NODE_NAME]:e});for(let t=0;t<m;t++){const o=r.attributes[t].name;o!==l&&(e["@"+o]=r.attributes[t].value)}}assignPropertyValue(s,p,e)}const a={};for(const e in s){const t=s[e];if(t&&"object"==typeof t&&Object.prototype.hasOwnProperty.call(t,"#text")){a[e]=t["#text"];for(const r in t)"#text"!==r&&(a[e+r]=t[r])}else a[e]=t}if(s=a,r){const t=new ol.Feature(s);o&&t.setGeometryName(o);const r=e.getAttribute("fid")||e.getAttributeNS(this.namespace,"id");return r&&t.setId(r),t}return s},GMLBase.prototype.readFeatures=async function(e,t){if(delete this.featureTypeMetadata,!e)return[];let r,o;if("string"==typeof e?(o=parse(e),r=this.readFeaturesFromDocument(o,t)):(o=e,r=isDocument(e)?this.readFeaturesFromDocument(e,t):this.readFeaturesFromNode(e,t)),r.length){if(this.featureTypeMetadata){const e=this.featureTypeMetadata.originalMetadata,t=new FeatureTypeParser;for(let r in e.featureTypes){if(r.endsWith(":feature"))continue;const s=e.featureTypes[r],a=await t.parseSchemas(o,r);Object.assign(s,Object.values(a)[0])}const[s]=getNameComponents(Object.keys(e.featureTypes)[0]),a=(e,t,r)=>{const o=(e,t,r,o)=>{e?e.set(r,o,!0):t[r]=o};for(let n in t){let i=r[n];if(!i){const[e,t]=getPropertyComponents(n);e===s&&(i=r[t])}if(i){const r=i.type["#text"]?.type??i.type;if("string"==typeof r)switch(this.getType(r)){case Consts.dataType.FLOAT:case Consts.dataType.INTEGER:{let r=parseFloat(t[n]);Number.isNaN(r)&&(r=void 0),o(e,t,n,r);break}case Consts.dataType.BOOLEAN:o(e,t,n,"true"===t[n])}else a(null,t[n],r)}}},n=Object.values(e.featureTypes)[0],i=function(e,t){if(!(t instanceof Geometry))for(let r in t){const o=t[r],[a,n]=getPropertyComponents(r);a&&(e?r===e.getGeometryName()?(e.setGeometryName(n),e.unset(r,!0),e.set(n,o,!0)):a===s&&(e.unset(r,!0),e.set(n,o,!0)):a===s&&(t[n]=o,delete t[r])),o&&"object"==typeof o&&(a&&a!==s||i(null,o))}},p=function(e,t,r){if(!t||"object"!=typeof t)return;const o=Object.keys(t);for(let a of o){let o=r[a];if(!o){const[e,t]=getPropertyComponents(a);e===s&&(o=r[t])}if(o){const r=o.type;if(r&&"object"==typeof r)if(Object.prototype.hasOwnProperty.call(r,"#text"))p(null,t[a],r);else{const s=o["@maxOccurs"];if((parseInt(s)>1||"unbounded"===s)&&Array.isArray(t[a])){for(const e of t[a])e["#text"]||delete e["#text"];break}Object.prototype.hasOwnProperty.call(t,a)?p(null,t[a],r):e&&e.unset(a,!0)}}}};for(const e of r){let t=e.getProperties();a(e,t,n),i(e,t),p(e,t,n)}}const e=(t,r)=>{for(const o in r){const s=r[o];if(s instanceof Geometry)return t.setGeometry(s),delete r[o],!0;if(s&&"object"==typeof s&&Object.keys(s).length&&e(t,s))return!0}return!1};r.forEach((t=>{t.getGeometry()||e(t,t.getProperties())}))}return r},GMLBase.prototype.getGeometryType=function(e){switch(e){case"gml:LinearRingPropertyType":case"gml:PolygonPropertyType":case"LinearRingPropertyType":case"PolygonPropertyType":case"gml:Polygon":case"Polygon":return Consts.geom.POLYGON;case"gml:MultiPolygonPropertyType":case"gml:MultiSurfacePropertyType":case"MultiPolygonPropertyType":case"MultiSurfacePropertyType":case"gml:MultiPolygon":case"MultiPolygon":return Consts.geom.MULTIPOLYGON;case"gml:LineStringPropertyType":case"gml:CurvePropertyType":case"LineStringPropertyType":case"CurvePropertyType":case"gml:LineString":case"LineString":return Consts.geom.POLYLINE;case"gml:MultiLineStringPropertyType":case"gml:MultiCurvePropertyType":case"MultiLineStringPropertyType":case"MultiCurvePropertyType":case"gml:MultiLineString":case"MultiLineString":return Consts.geom.MULTIPOLYLINE;case"gml:PointPropertyType":case"PointPropertyType":case"gml:Point":case"Point":return Consts.geom.POINT;case"gml:MultiPointPropertyType":case"MultiPointPropertyType":case"gml:MultiPoint":case"MultiPoint":return Consts.geom.MULTIPOINT;case"gml:BoxPropertyType":case"BoxPropertyType":return Consts.geom.RECTANGLE;case"gml:GeometryCollectionPropertyType":case"gml:GeometryAssociationType":case"gml:GeometryPropertyType":case"gml:AbstractGeometryType":case"GeometryCollectionPropertyType":case"GeometryAssociationType":case"GeometryPropertyType":return Consts.geom.GEOMETRY;default:return!1}},GMLBase.getGeometryType=function(e){return GMLBase.prototype.getGeometryType(e)};export default GMLBase;