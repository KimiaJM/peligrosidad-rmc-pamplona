"use strict";(self.webpackChunksitna_map_project_by_kimia_jimenez_majidi=self.webpackChunksitna_map_project_by_kimia_jimenez_majidi||[]).push([[5121],{2132:(e,t,r)=>{function i(e,t){let r=e.length-t,i=0;do{for(let r=t;r>0;r--)e[i+t]+=e[i],i++;r-=t}while(r>0)}function n(e,t,r){let i=0,n=e.length;const o=n/r;for(;n>t;){for(let r=t;r>0;--r)e[i+t]+=e[i],++i;n-=t}const a=e.slice();for(let t=0;t<o;++t)for(let i=0;i<r;++i)e[r*t+i]=a[(r-i-1)*o+t]}r.d(t,{A:()=>o});class o{async decode(e,t){const r=await this.decodeBlock(t),o=e.Predictor||1;if(1!==o){const t=!e.StripOffsets;return function(e,t,r,o,a,s){if(!t||1===t)return e;for(let e=0;e<a.length;++e){if(a[e]%8!=0)throw new Error("When decoding with predictor, only multiple of 8 bits are supported.");if(a[e]!==a[0])throw new Error("When decoding with predictor, all samples must have the same size.")}const l=a[0]/8,c=2===s?1:a.length;for(let s=0;s<o&&!(s*c*r*l>=e.byteLength);++s){let o;if(2===t){switch(a[0]){case 8:o=new Uint8Array(e,s*c*r*l,c*r*l);break;case 16:o=new Uint16Array(e,s*c*r*l,c*r*l/2);break;case 32:o=new Uint32Array(e,s*c*r*l,c*r*l/4);break;default:throw new Error(`Predictor 2 not allowed with ${a[0]} bits per sample.`)}i(o,c)}else 3===t&&(o=new Uint8Array(e,s*c*r*l,c*r*l),n(o,c,l))}return e}(r,o,t?e.TileWidth:e.ImageWidth,t?e.TileLength:e.RowsPerStrip||e.ImageLength,e.BitsPerSample,e.PlanarConfiguration)}return r}}},7502:(e,t,r)=>{r.r(t),r.d(t,{default:()=>n});var i=r(2132);class n extends i.A{decodeBlock(e){return e}}}}]);